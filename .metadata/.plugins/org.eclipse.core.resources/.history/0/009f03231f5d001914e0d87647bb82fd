package com.mab2.playerservice;

import java.net.URI;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.mvc.ControllerLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.mab2.playerservice.exception.ExistingEntityException;
import com.mab2.playerservice.exception.NotFoundException;

@RestController
public class UserJPAResource {
	
	@Autowired
	private PlayerRepository playerRepository;
	
	@GetMapping(path="/jpa/users")
	public List<User> retrieveAllUsers() {
		return playerRepository.findAll();
	}
	
	@GetMapping(path="/jpa/users/{id}")
	public Resource<User> retrieveUser(@PathVariable int id) {
		User user = playerRepository.findById(id)
				.orElseThrow(() -> new NotFoundException("user-"+id));
		Resource<User> resource = new Resource<User>(user);
		ControllerLinkBuilder linkTo = 
				ControllerLinkBuilder.linkTo(ControllerLinkBuilder.methodOn(this.getClass()).retrieveAllUsers());
		
		resource.add(linkTo.withRel("all-users"));
		
		return resource;
	}
	
	@PostMapping(path="/jpa/users")
	public ResponseEntity<User> saveUser(@Valid @RequestBody User user) {
		if (user.getId() != null && playerRepository.findById(user.getId()).isPresent()) {
			throw new ExistingEntityException("user-"+user.getId());
		}
		
		User savedUser = playerRepository.save(user);
		URI location = ServletUriComponentsBuilder
			.fromCurrentRequest()
			.path("/{id}")
			.buildAndExpand(savedUser.getId())
			.toUri();
		return ResponseEntity.created(location).build();
	}
	
	@DeleteMapping(path="/jpa/users/{id}")
	public void deleteUser(@PathVariable int id) {
		int retrievedId = playerRepository.findById(id)
			.orElseThrow(() -> new NotFoundException("user-"+id))
			.getId();
		playerRepository.deleteById(retrievedId);
	}
	
	@GetMapping(path="/jpa/users/{id}/posts/{postId}")
	public Post retrievePostForAUser(@PathVariable int id, @PathVariable int postId) {
		playerRepository.findById(id)
			.orElseThrow(() -> new NotFoundException("user-"+id));
		return postRepository.findById(postId)
				.orElseThrow(() -> new NotFoundException("post-"+id));
	}
	
	@PostMapping(path="/jpa/users/{id}/posts")
	public ResponseEntity<Post> savePostForAUser(@PathVariable int id, @RequestBody Post post) {
		if (post.getId() != null && postRepository.findById(post.getId()).isPresent()) {
			throw new ExistingEntityException("post-"+post.getId());
		} 
		post.setUser(playerRepository.findById(id)
				.orElseThrow(() -> new NotFoundException("user-"+id)));
		Post savedPost = postRepository.save(post);
		URI location = ServletUriComponentsBuilder
			.fromCurrentRequest()
			.path("/{id}")
			.buildAndExpand(savedPost.getId())
			.toUri();
		return ResponseEntity.created(location).build();
	}
	
	@GetMapping("/jpa/users/{id}/posts")
	public List<Post> retrievePostsForAUser(@PathVariable int id) {
		User user = playerRepository.findById(id)
				.orElseThrow(() -> new NotFoundException("user-"+id));
		return user.getPosts(); 
	}
	
}

