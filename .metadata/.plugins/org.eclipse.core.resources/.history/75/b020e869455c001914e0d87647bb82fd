package com.mab2.playerservice;

import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

@Configuration
public class KafkaConfiguration {

	@Bean
	public ProducerFactory<String, Player> producerFactory() {
		Map<String, Object> config = Map.ofEntries(
				Map.entry(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092"),
				Map.entry(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class),
				Map.entry(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class));
		
		return new DefaultKafkaProducerFactory<String, Player>(config);
	}
	
	@Bean 
	KafkaTemplate<String, Player> kafkaTemplate() {
		return new KafkaTemplate<String, Player>(producerFactory());
	}
	
	StreamsBuilder builder = new StreamsBuilder();
	
	
	@Bean
	KStream<String, Long> wordCounts = builder.stream(
		    "word-counts-input-topic", /* input topic */
		    Consumed.with(
		      Serdes.String(), /* key serde */
		      Serdes.Long()   /* value serde */
		    );
	
}
