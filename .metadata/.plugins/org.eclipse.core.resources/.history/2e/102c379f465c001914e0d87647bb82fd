package com.mab2.playerservice;

import java.util.Date;

import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.KStream;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PlayerServiceController {
	
	@Autowired
	KafkaTemplate<String, Player> kafkaTemplate;
	
	private static final String TOPIC = "Player";
	
	@PostMapping("/player/")
    public void createPlayer(@RequestBody Player player) {
		
		if (!playerIdExists(player.getId())) {
			kafkaTemplate.send(TOPIC, player);
		} else {
			throw new IllegalArgumentException("Whatever m8");
		}
	
	}
	
	@PostMapping("/player/{id}/name/{name}")
    public void updatePlayerName(@PathVariable int id, @PathVariable String name) {
		
		if (playerIdExists(id)) {
			var player = new Player(id, name, new Date());
			kafkaTemplate.send(TOPIC, player);
		} else {
			throw new IllegalArgumentException("Whatever m8");
		}
	
	}

	private boolean playerIdExists(int id) {
		StreamsBuilder builder = new StreamsBuilder();
		
		
		KStream<String, Player> playerStream = builder.stream("Player");
		
		return true;
	}
	
	
	
	
}
